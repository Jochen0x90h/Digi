f->name = "acos";
f->function = (void*)(double (*)(double))acos;
++f;
f->name = "asin";
f->function = (void*)(double (*)(double))asin;
++f;
f->name = "atan";
f->function = (void*)(double (*)(double))atan;
++f;
f->name = "atan2";
f->function = (void*)(double (*)(double, double))atan2;
++f;
f->name = "ceil";
f->function = (void*)(double (*)(double))ceil;
++f;
f->name = "cos";
f->function = (void*)(double (*)(double))cos;
++f;
f->name = "cosf";
f->function = (void*)(float (*)(float))cosf;
++f;
f->name = "createPixelShader";
f->function = (void*)createPixelShader;
++f;
f->name = "createVertexShader";
f->function = (void*)createVertexShader;
++f;
f->name = "eBTF";
f->function = (void*)(float (*)(const float *, const float *, int, float))evalBezierTrack;
++f;
f->name = "eBTS";
f->function = (void*)(float (*)(const ushort *, const ushort *, int, float))evalBezierTrack;
++f;
f->name = "eCTF";
f->function = (void*)(float (*)(const float *, float))evalCatmullRomTrack;
++f;
f->name = "eCTS";
f->function = (void*)(float (*)(const ushort *, float))evalCatmullRomTrack;
++f;
f->name = "eSTF";
f->function = (void*)(float (*)(const float *, const float *, int, float))evalStepTrack;
++f;
f->name = "eSTS";
f->function = (void*)(float (*)(const ushort *, const ushort *, int, float))evalStepTrack;
++f;
f->name = "eWBTF";
f->function = (void*)(float (*)(const float *, const float *, int, float))evalWeightedBezierTrack;
++f;
f->name = "eWBTS";
f->function = (void*)(float (*)(const ushort *, const ushort *, int, float))evalWeightedBezierTrack;
++f;
f->name = "exp";
f->function = (void*)(double (*)(double))exp;
++f;
f->name = "fabs";
f->function = (void*)(double (*)(double))fabs;
++f;
f->name = "floor";
f->function = (void*)(double (*)(double))floor;
++f;
f->name = "fmod";
f->function = (void*)(double (*)(double, double))fmod;
++f;
f->name = "free";
f->function = (void*)free16;
++f;
f->name = "glActiveTexture";
f->function = (void*)glActiveTexture;
++f;
f->name = "glAttachShader";
f->function = (void*)glAttachShader;
++f;
f->name = "glBindAttribLocation";
f->function = (void*)glBindAttribLocation;
++f;
f->name = "glBindBuffer";
f->function = (void*)glBindBuffer;
++f;
f->name = "glBindTexture";
f->function = (void*)glBindTexture;
++f;
f->name = "glBindVertexArray";
#if GL_MAJOR >= 3
	f->function = (void*)glBindVertexArray;
#else
	f->function = NULL;
#endif
++f;
f->name = "glBlendColor";
f->function = (void*)glBlendColor;
++f;
f->name = "glBlendEquation";
f->function = (void*)glBlendEquation;
++f;
f->name = "glBlendEquationSeparate";
f->function = (void*)glBlendEquationSeparate;
++f;
f->name = "glBlendFunc";
f->function = (void*)glBlendFunc;
++f;
f->name = "glBlendFuncSeparate";
f->function = (void*)glBlendFuncSeparate;
++f;
f->name = "glBufferData";
f->function = (void*)glBufferData;
++f;
f->name = "glBufferSubData";
f->function = (void*)glBufferSubData;
++f;
f->name = "glCompileShader";
f->function = (void*)glCompileShader;
++f;
f->name = "glCompressedTexImage2D";
f->function = (void*)glCompressedTexImage2D;
++f;
f->name = "glCreateProgram";
f->function = (void*)glCreateProgram;
++f;
f->name = "glCreateShader";
f->function = (void*)glCreateShader;
++f;
f->name = "glCullFace";
f->function = (void*)glCullFace;
++f;
f->name = "glDeleteBuffers";
f->function = (void*)glDeleteBuffers;
++f;
f->name = "glDeleteProgram";
f->function = (void*)glDeleteProgram;
++f;
f->name = "glDeleteShader";
f->function = (void*)glDeleteShader;
++f;
f->name = "glDeleteTextures";
f->function = (void*)glDeleteTextures;
++f;
f->name = "glDeleteVertexArrays";
#if GL_MAJOR >= 3
	f->function = (void*)glDeleteVertexArrays;
#else
	f->function = NULL;
#endif
++f;
f->name = "glDisable";
f->function = (void*)glDisable;
++f;
f->name = "glDisableVertexAttribArray";
f->function = (void*)glDisableVertexAttribArray;
++f;
f->name = "glDrawArrays";
f->function = (void*)glDrawArrays;
++f;
f->name = "glDrawElements";
f->function = (void*)glDrawElements;
++f;
f->name = "glEnable";
f->function = (void*)glEnable;
++f;
f->name = "glEnableVertexAttribArray";
f->function = (void*)glEnableVertexAttribArray;
++f;
f->name = "glGenBuffers";
f->function = (void*)glGenBuffers;
++f;
f->name = "glGenTextures";
f->function = (void*)glGenTextures;
++f;
f->name = "glGenVertexArrays";
#if GL_MAJOR >= 3
	f->function = (void*)glGenVertexArrays;
#else
	f->function = NULL;
#endif
++f;
f->name = "glGenerateMipmap";
f->function = (void*)glGenerateMipmap;
++f;
f->name = "glGetFloatv";
f->function = (void*)glGetFloatv;
++f;
f->name = "glGetUniformLocation";
f->function = (void*)glGetUniformLocation;
++f;
f->name = "glLinkProgram";
f->function = (void*)glLinkProgram;
++f;
f->name = "glMapBuffer";
f->function = (void*)glMapBuffer;
++f;
f->name = "glShaderSource";
f->function = (void*)glShaderSource;
++f;
f->name = "glTexImage2D";
f->function = (void*)glTexImage2D;
++f;
f->name = "glTexImage3D";
#if !defined(GL_ES) || GL_MAJOR >= 3
	f->function = (void*)glTexImage3D;
#else
	f->function = NULL;
#endif
++f;
f->name = "glTexParameterfv";
f->function = (void*)glTexParameterfv;
++f;
f->name = "glTexParameteri";
f->function = (void*)glTexParameteri;
++f;
f->name = "glTexParameteriv";
f->function = (void*)glTexParameteriv;
++f;
f->name = "glTexSubImage2D";
f->function = (void*)glTexSubImage2D;
++f;
f->name = "glTexSubImage3D";
#if !defined(GL_ES) || GL_MAJOR >= 3
	f->function = (void*)glTexSubImage3D;
#else
	f->function = NULL;
#endif
++f;
f->name = "glUniform1i";
f->function = (void*)glUniform1i;
++f;
f->name = "glUniform4fv";
f->function = (void*)glUniform4fv;
++f;
f->name = "glUniform4iv";
f->function = (void*)glUniform4iv;
++f;
f->name = "glUnmapBuffer";
f->function = (void*)glUnmapBuffer;
++f;
f->name = "glUseProgram";
f->function = (void*)glUseProgram;
++f;
f->name = "glVertexAttribPointer";
f->function = (void*)glVertexAttribPointer;
++f;
f->name = "log";
f->function = (void*)(double (*)(double))log;
++f;
f->name = "log10";
f->function = (void*)(double (*)(double))log10;
++f;
f->name = "malloc";
f->function = (void*)malloc16;
++f;
f->name = "noise2f";
f->function = (void*)noise2f;
++f;
f->name = "noise3f";
f->function = (void*)noise3f;
++f;
f->name = "pow";
f->function = (void*)(double (*)(double, double))pow;
++f;
f->name = "round";
f->function = (void*)(double (*)(double))round;
++f;
f->name = "sin";
f->function = (void*)(double (*)(double))sin;
++f;
f->name = "sinf";
f->function = (void*)(float (*)(float))sinf;
++f;
f->name = "sqrt";
f->function = (void*)(double (*)(double))sqrt;
++f;
f->name = "sqrtf";
f->function = (void*)(float (*)(float))sqrtf;
++f;
f->name = "tan";
f->function = (void*)(double (*)(double))tan;
++f;
f->name = "trunc";
f->function = (void*)(double (*)(double))trunc;
++f;
